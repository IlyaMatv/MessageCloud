{"version":3,"sources":["components/NameCmp/NameCmp.module.css","components/MessageCloud/MessageText/MessageText.module.css","components/MessageCloud/MessageCloud.module.css","components/MessageCloud/Name/Name.module.css","components/Login/Login.module.css","components/MessageCloud/Name/Name.jsx","components/MessageCloud/MessageText/MessageText.jsx","components/MessageCloud/MessageCloud.jsx","components/NameCmp/NameCmp.jsx","components/Login/Login.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Name","props","className","classes","name","MessageText","text","time","MessageCloud","message","NameCmp","qualities","map","el","index","key","gold","nameItem","Login","state","count","onAddName","input","current","value","setState","alert","render","login","ref","type","placeholder","onClick","React","createRef","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,KAAO,sBAAsB,SAAW,4B,gBCAvFD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,4B,kBCA1DD,EAAOC,QAAU,CAAC,QAAU,gC,gBCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,kBCAzBD,EAAOC,QAAU,CAAC,MAAQ,uB,iMCWXC,EATF,SAACC,GAEV,OACI,yBAAKC,UAAWC,IAAQC,MAAxB,oF,gBCOOC,EAVK,SAACJ,GAEjB,OACI,yBAAKC,UAAWC,IAAQG,MAAxB,sFAEI,yBAAKJ,UAAWC,IAAQI,MAAxB,WCOGC,EAVM,SAACP,GAElB,OACI,yBAAKC,UAAWC,IAAQM,SACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,gBCYGC,EAjBC,SAACT,GAEb,IACMU,EADe,CAAC,6CAAW,iFAAiB,gEACnBC,KAAI,SAACC,EAAIC,GACpC,OAAQ,yBAAKC,IAAKD,EAAOZ,UAAqB,IAAVY,EAAcX,IAAQa,KAAOb,IAAQc,UAAWJ,MAKxF,OACI,yBAAKX,UAAWC,IAAQC,MACpB,gHACCO,I,8CCkBEO,E,YA/BX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAIVkB,MAAQ,CACJC,MAAO,GANQ,EAUnBC,UAAY,WACR,IAAIjB,EAAO,EAAKkB,MAAMC,QAAQC,MAC9B,EAAKF,MAAMC,QAAQC,MAAQ,GAC3B,EAAKC,UAAS,SAACN,GACX,MAAO,CAACC,MAAOD,EAAMC,MAAQ,MAEjCM,MAAM,WAAD,OAAYtB,KAhBF,EAmBnBuB,OAAS,WACL,OACI,yBAAKzB,UAAWC,IAAQyB,OACpB,8BAAO,EAAKT,MAAMC,OAClB,2BAAOS,IAAK,EAAKP,MAAOQ,KAAK,OAAOC,YAAY,cAChD,4BAAQC,QAAS,EAAKX,WAAtB,YAtBR,EAAKC,MAAQW,IAAMC,YAFJ,E,2BADHD,IAAME,WCgBXC,MAZf,WACE,OACE,yBAAKlC,UAAU,QAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASf,OAAO,kBAAC,EAAD,MAASgB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.7e4908b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"NameCmp_name__1o18_\",\"gold\":\"NameCmp_gold__2yTzn\",\"nameItem\":\"NameCmp_nameItem__23Zcb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"MessageText_text__3rkaN\",\"time\":\"MessageText_time__3LokH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageCloud_message__5T0QZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Name_name__2BO9_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2hU00\"};","import React from 'react'\r\nimport classes from './Name.module.css'\r\n\r\nconst Name = (props) => {\r\n\r\n    return (\r\n        <div className={classes.name}>\r\n            Илья Матвейчук\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Name","import React from 'react'\r\nimport classes from './MessageText.module.css'\r\n\r\nconst MessageText = (props) => {\r\n\r\n    return (\r\n        <div className={classes.text}>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum quia nam incidunt.\r\n            <div className={classes.time}>21:00</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageText","import React from 'react'\r\nimport classes from './MessageCloud.module.css'\r\nimport Name from './Name/Name'\r\nimport MessageText from './MessageText/MessageText'\r\n\r\nconst MessageCloud = (props) => {\r\n\r\n    return (\r\n        <div className={classes.message}>\r\n            <Name />\r\n            <MessageText />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageCloud","import React from 'react'\r\nimport classes from './NameCmp.module.css'\r\n\r\n\r\n\r\nconst NameCmp = (props) => {\r\n\r\n    const allQualities = ['буддист', 'контрабандист', 'тракторист']\r\n    const qualities = allQualities.map((el, index) => {\r\n        return (<div key={index} className={index === 1 ? classes.gold : classes.nameItem}>{el}</div>)\r\n    }) \r\n    \r\n\r\n\r\n    return (\r\n        <div className={classes.name}>\r\n            <div>Матвейчук Илья</div>\r\n            {qualities}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NameCmp","import React from 'react'\r\nimport classes from './Login.module.css'\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.input = React.createRef()\r\n    }\r\n\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n\r\n    onAddName = () => {\r\n        let name = this.input.current.value\r\n        this.input.current.value = ''\r\n        this.setState((state) => {\r\n            return {count: state.count + 1}\r\n        })\r\n        alert(`Welcome ${name}`)\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className={classes.login}>\r\n                <span>{this.state.count}</span>\r\n                <input ref={this.input} type=\"text\" placeholder=\"your name\" />\r\n                <button onClick={this.onAddName}>click!</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport './App.css';\nimport MessageCloud from './components/MessageCloud/MessageCloud';\nimport NameCmp from './components/NameCmp/NameCmp';\nimport Login from './components/Login/Login';\n\n\nfunction App() {\n  return (\n    <div className=\"wrap\">\n\n      <NameCmp />\n      <MessageCloud />\n      <Login />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}